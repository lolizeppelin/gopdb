#!/usr/bin/python
import logging
import sys

from simpleutil.config import cfg
from simpleutil.utils import table

from goperation.api.client.config import client_opts
from goperation.api.client.config import index_opts
from goperation.api.client import ManagerClient

from gopdb import common
from gopdb.api.client import GopDBClient

CONF = cfg.CONF

select_opts = [
    cfg.StrOpt('impl',
               short='m',
               default='local',
               choices=['local', 'record'],
               help='Database impl type, default value is local',
               ),
]

create_local_opts = [
    cfg.IntOpt('agent_id',
               short='agent',
               help='Database install agent id, if not set, '
                    'will auto select from zone'),
    cfg.StrOpt('zone',
               regex='^[a-z][a-z0-9]+$',
               help='Agent zone mark'),
]

create_record_opts = [
    cfg.HostnameOrIPOpt('host',
                        required=True,
                        help='Database instance ipaddress'),
    cfg.PortOpt('port',
                default=3306,
                help='Database instance port'),
    cfg.StrOpt('zone',
               default='all',
               regex='^[a-z][a-z0-9]+$',
               help='Agent zone mark defalut all'),
]

IMPL = {'local': create_local_opts, 'record': create_record_opts}

create_base_opts = [
    cfg.StrOpt('dbtype',
               default='mysql',
               help='Database type, defalut is mysql',
               ),
    cfg.IntOpt('affinity',
               short='f',
               default=0,
               help='Database affinity mark, see endpoint for more',
               ),
    cfg.StrOpt('user',
               short='u',
               default='root',
               help='Database root user name'),
    cfg.StrOpt('passwd',
               short='p',
               default=None,
               help='Database root user password, if value is empty, '
                    'create schema will do nothing'),
]

one_opts = [
    cfg.IntOpt('database_id',
               short='d',
               required=True,
               help='Target Database id'),
]


def prepare_results(r):
    if r is None:
        raise ValueError('Resulst is None')
    return r.get('resultcode'), r.get('result'), r.get('data')


def client(session=None):
    return GopDBClient(httpclient=ManagerClient(url=CONF.gcenter, port=CONF.gcenter_port,
                                                retries=CONF.retries, timeout=CONF.apitimeout,
                                                token=CONF.trusted, session=session))


def create():
    _opt = select_opts[0]
    prefixs = ['--%s' % _opt.name]
    if _opt.short:
        prefixs.append('-%s' % _opt.short)
    choices = _opt.type.choices
    index = 0
    for i, arg in enumerate(sys.argv):
        if arg in prefixs:
            index = i + 1
    if not index:
        impl = _opt.default
    else:
        impl = sys.argv[index]
    if choices and impl not in choices:
        raise ValueError('impl value not in %s' % choices)

    impl_create_opts = IMPL[impl]
    CONF.register_cli_opts(select_opts)
    CONF.register_cli_opts(create_base_opts)
    CONF.register_cli_opts(impl_create_opts)
    CONF(project='cmd')
    if impl == 'local':
        if CONF.passwd is None:
            raise ValueError('Local database need passwd for root')
    _client = client()
    body = {}
    for opt in select_opts:
        body.setdefault(opt.name, CONF[opt.name])
    for opt in create_base_opts:
        body.setdefault(opt.name, CONF[opt.name])
    for opt in impl_create_opts:
        body.setdefault(opt.name, CONF[opt.name])
    code, result, data = prepare_results(_client.databases_create(body=body))
    database = data[0]
    print('\033[1;32;40m')
    print 'Delete database success'
    print 'id: %d' % database.get('database_id')
    print 'impl: %s' % impl
    print 'dbtype: %s' % database.get('dbtype')
    print 'affinity: %d' % database.get('affinity')
    print 'host: %s' % database.get('host')
    print 'port: %d' % database.get('port')
    print('\033[0m')


def delete():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.database_delete(CONF.database_id))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    database = data[0]
    print('\033[1;32;40m')
    print 'Delete database success'
    print 'id: %d' % database.get('database_id')
    print 'impl: %s' % database.get('impl')
    print 'dbtype: %s' % database.get('dbtype')
    print 'host: %s' % database.get('host')
    print 'port: %d' % database.get('port')
    print('\033[0m')


def list():
    cfg.set_defaults(select_opts, impl=None)

    CONF.register_cli_opts(select_opts)
    CONF.register_cli_opts(index_opts)
    CONF(project='cmd')
    _client = client()

    body = {}
    for opt in select_opts:
        body.setdefault(opt.name, CONF[opt.name])
    for opt in index_opts:
        body.setdefault(opt.name, CONF[opt.name])

    code, result, data = prepare_results(_client.databases_index(body=body))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    database_heads = ['id', 'impl', 'dbtype', 'version', 'reflection_id', 'status', 'desc']
    print('\033[1;32;40m')
    print 'Database Status\t %d:OK\t %d:UNACTIVE' % (common.OK, common.UNACTIVE)
    print('\033[0m')
    tb = table.PleasantTable(ident=0, columns=database_heads, counter=True)
    for database in data:
        tb.add_row([database.get('database_id'), database.get('impl'), database.get('dbtype'),
                    database.get('dbversion'), database.get('reflection_id'),
                    database.get('status'), database.get('desc')])
    print tb.pformat()


def show():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.database_show(CONF.database_id))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    database = data[0]
    quotes = database.get('quotes')
    slaves = database.get('slaves')
    schemas = database.get('schemas')

    print('\033[1;32;40m')
    print 'Database Status\t %d:OK\t %d:UNACTIVE' % (common.OK, common.UNACTIVE)
    print('\033[0m')
    print 'id: %d' % database.get('database_id')
    print 'impl: %s' % database.get('impl')
    print 'dbtype: %s' % database.get('dbtype')
    print 'version: %s' % database.get('dbversion')
    print 'status: %d' % database.get('status')
    print 'slave: %d' % database.get('slave')
    print 'reflection id: %s' % database.get('reflection_id')
    if slaves:
        tb = table.PleasantTable(ident=0,
                                 columns=['slave_id', 'readonly'],
                                 counter=True)
        for salve in slaves:
            tb.add_row([salve.get('slave_id'), salve.get('readonly')])
        print tb.pformat()
    if schemas:
        tb = table.PleasantTable(ident=0, columns=['schema_id', 'schema'], counter=True)
        for schema in schemas:
            tb.add_row([schema.get('schema_id'), schema.get('schema')])
        print tb.pformat()
    if quotes:
        tb = table.PleasantTable(ident=0,
                                 columns=['endpoint', 'entity', 'schema_id', 'quote_id', 'desc'],
                                 counter=True)
        for quote in quotes:
            tb.add_row([quote.get('endpoint'), quote.get('entity'),
                        quote.get('schema_id'), quote.get('quote_id'),
                        quote.get('desc')])
        print tb.pformat()


def active():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.database_update(CONF.database_id,
                                                                 body=dict(status=common.OK)))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    print('\033[1;32;40m')
    print 'Active database success'
    print('\033[0m')


def status():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.database_status(CONF.database_id))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    dbresult = data[0]
    print('\033[1;32;40m')
    print dbresult.get('result')
    print('\033[0m')


def start():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.database_start(CONF.database_id))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    dbresult = data[0]
    print('\033[1;32;40m')
    print dbresult.get('result')
    print('\033[0m')


def stop():
    CONF.register_cli_opts(one_opts)
    CONF(project='cmd')
    _client = client()
    code, result, data = prepare_results(_client.database_stop(CONF.database_id))
    if code:
        print('\033[1;31;40m')
        print 'Fail, code %d, result %s' % (code, result)
        if data:
            print data
        print('\033[0m')
        sys.exit(1)
    dbresult = data[0]
    print('\033[1;32;40m')
    print dbresult.get('result')
    print('\033[0m')



def main():
    try:
        func = sys.argv.pop(1)
        if func not in ('list', 'show', 'create', 'delete', 'active', 'start', 'stop', 'status'):
            raise ValueError
    except (IndexError, ValueError):
        print 'action is:  list  create  active  delete  status  start  stop'
        print 'use -h for help'
        sys.exit(1)
    func = eval(func)
    logging.basicConfig(level=logging.WARN)
    CONF.register_cli_opts(client_opts)
    func()


if __name__ == '__main__':
    main()
